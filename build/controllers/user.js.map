{"version":3,"sources":["../../controllers/user.js"],"names":["dotenv","config","Sequelize","Op","iLike","or","User","models","secret","process","env","SECRET_KEY","time","expiresIn","generateToken","jwt","sign","payload","Users","req","res","id","decoded","findOne","where","user","json","username","email","isMentor","findByPk","params","userId","then","status","message","update","body","password","updatedUser","catch","send","error","usernameOrEmail","validPassword","tokenPayload","token","create","console","log"],"mappings":"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","file":"user.js","sourcesContent":["import Sequelize from 'sequelize';\nimport jwt from 'jsonwebtoken';\nimport dotenv from 'dotenv';\nimport 'babel-polyfill';\nimport models from '../models';\n\ndotenv.config();\nconst { iLike, or } = Sequelize.Op;\nconst { User } = models;\nconst secret = process.env.SECRET_KEY;\nconst time = { expiresIn: '72hrs' };\nconst generateToken = payload => jwt.sign(payload, secret, time);\n\n/**\n * @class\n */\nclass Users {\n/**\n    * Represents getUser controller\n    * @constructor\n    * @param {object} req - The request object.\n    * @param {object} res - The response object.\n    * @param {object} next -The next middleware\n    */\n  static async getUser(req, res) {\n    const { id } = req.decoded;\n    const user = await User.findOne({ where: { id } });\n    return res.json({\n      username: user.username,\n      email: user.email,\n      isMentor: user.isMentor,\n    });\n  }\n\n  /**\n    * Controll update a user.\n    * @constructor\n    * @param {object} req - The request object.\n    * @param {object} res - The response object.\n    */\n  static updateUser(req, res) {\n    User.findByPk(req.params.userId)\n      .then((user) => {\n        if (!user) {\n          return res.status(404).json({\n            message: 'User Not Found'\n          });\n        }\n\n        return user\n          .update({\n            username: req.body.username,\n            email: req.body.email,\n            password: req.body.password\n          })\n          .then(updatedUser => res.status(200).json({\n            updatedUser,\n            message: 'User Has been updated'\n          }))\n          .catch(error => res.status(400).send(error));\n      });\n  }\n\n  /**\n    * Represents a controller.\n    * @constructor\n    * @param {object} req - The request object.\n    * @param {object} res - The response object.\n    * @param {object} next - The response object.\n    */\n  static async login(req, res) {\n    const { usernameOrEmail, password } = req.body;\n    const user = await User\n      .findOne({\n        where: {\n          [or]: [\n            { username: { [iLike]: usernameOrEmail } },\n            { email: { [iLike]: usernameOrEmail } }\n          ]\n        }\n      });\n    await user.validPassword(password);\n\n    const tokenPayload = {\n      id: user.id,\n      isMentor: user.isMentor\n    };\n\n    return res.status(200).json({\n      message: 'Login was successful',\n      token: generateToken(tokenPayload)\n    });\n  }\n\n  /**\n    * Represents a controller.\n    * @constructor\n    * @param {object} req - The request object.\n    * @param {object} res - The response object.\n    */\n  static async register(req, res) {\n    const { username, email, password } = req.body;\n    const user = await User\n      .create({\n        username,\n        email,\n        password\n      });\n\n    const tokenPayload = {\n      id: user.id,\n      isMentor: user.isMentor\n    };\n    const token = generateToken(tokenPayload);\n    console.log(tokenPayload);\n\n    return res.status(201).json({\n      username: user.username,\n      email: user.email,\n      token\n    });\n  }\n}\n\nexport default Users;\n"]}