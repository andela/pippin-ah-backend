{"version":3,"sources":["../../middlewares/userValidations.js"],"names":["Sequelize","Op","iLike","or","User","models","requiredParams","nonEmptyParams","expectedParamsValidator","req","res","next","errorArray","forEach","param","Object","keys","body","includes","push","length","errorMessage","JSON","stringify","error","Error","status","nonEmptyParamsValidator","trim","emailExistsValidator","email","findOne","where","used","usernameExistsValidator","username","usernameIsInUse","emailIsValid","validation","isEmail","usernameValidator","isAlphanumeric","passwordValidator","password","loginParamsValidator","availableParams","loginNonEmptyParamsValidator","invalidCredentials","usernameOrEmail","loginUser","validPassword"],"mappings":"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","file":"userValidations.js","sourcesContent":["import Sequelize from 'sequelize';\nimport validation from 'validator';\nimport models from '../models';\n\nconst { iLike, or } = Sequelize.Op;\nconst { User } = models;\n\nconst requiredParams = ['username', 'email', 'password'];\nconst nonEmptyParams = ['username', 'email', 'password'];\n\nexport default {\n  expectedParamsValidator(req, res, next) {\n    const errorArray = [];\n\n    requiredParams.forEach((param) => {\n      if (!Object.keys(req.body).includes(param)) {\n        errorArray.push(`${param} is required`);\n      }\n    });\n\n    if (!errorArray.length) {\n      return next();\n    }\n\n    const errorMessage = JSON.stringify(errorArray);\n    const error = new Error(errorMessage);\n    error.status = 400;\n    return next(error);\n  },\n\n  nonEmptyParamsValidator(req, res, next) {\n    const errorArray = [];\n\n    nonEmptyParams.forEach((param) => {\n      if (!req.body[param].trim().length) {\n        errorArray.push(`${param} must not be empty`);\n      }\n    });\n\n    if (!errorArray.length) {\n      return next();\n    }\n\n    const errorMessage = JSON.stringify(errorArray);\n    const error = new Error(errorMessage);\n    error.status = 400;\n    return next(error);\n  },\n\n  async emailExistsValidator(req, res, next) {\n    const { email } = req.body;\n    const used = await User.findOne({ where: { email: { [iLike]: email } } });\n    if (used) {\n      const error = new Error('Email already in use');\n      error.status = 409;\n      return next(error);\n    }\n    next();\n  },\n\n  async usernameExistsValidator(req, res, next) {\n    const { username } = req.body;\n    const usernameIsInUse = await User\n      .findOne({ where: { username: { [iLike]: username } } });\n    if (usernameIsInUse) {\n      const error = new Error('Username already in use');\n      error.status = 409;\n      return next(error);\n    }\n    next();\n  },\n\n  emailIsValid(req, res, next) {\n    if (!validation.isEmail(req.body.email)) {\n      const error = new Error('please Enter a valid Email');\n      error.status = 400;\n      return next(error);\n    }\n    next();\n  },\n\n  usernameValidator(req, res, next) {\n    if (!validation.isAlphanumeric(req.body.username)) {\n      const error = new Error(\n        'username must contain only alphabets and numbers');\n      error.status = 400;\n      return next(error);\n    }\n\n    if (req.body.username.length < 6) {\n      const error = new Error(\n        'Your username must be at least 6 characters');\n      error.status = 400;\n      return next(error);\n    }\n    next();\n  },\n\n  passwordValidator(req, res, next) {\n    if (!validation.isAlphanumeric(req.body.password)) {\n      const error = new Error(\n        'password must contain only numbers and alphabet');\n      error.status = 400;\n      return next(error);\n    }\n    if (req.body.password.length < 8) {\n      const error = new Error(\n        'Your password must be at least 8 characters');\n      error.status = 400;\n      return next(error);\n    }\n    next();\n  },\n\n  loginParamsValidator(req, res, next) {\n    const availableParams = ['usernameOrEmail', 'password'];\n\n    const errorArray = [];\n\n    availableParams.forEach((param) => {\n      if (!Object.keys(req.body).includes(param)) {\n        errorArray.push(`${param} is required`);\n      }\n    });\n\n    if (!errorArray.length) {\n      return next();\n    }\n\n    const errorMessage = JSON.stringify(errorArray);\n    const error = new Error(errorMessage);\n    error.status = 400;\n    return next(error);\n  },\n\n  loginNonEmptyParamsValidator(req, res, next) {\n    const availableParams = ['usernameOrEmail', 'password'];\n    const errorArray = [];\n\n    availableParams.forEach((param) => {\n      if (!req.body[param].trim().length) {\n        errorArray.push(`${param} must not be empty`);\n      }\n    });\n\n    if (!errorArray.length) {\n      return next();\n    }\n\n    const errorMessage = JSON.stringify(errorArray);\n    const error = new Error(errorMessage);\n    error.status = 400;\n    return next(error);\n  },\n\n  async invalidCredentials(req, res, next) {\n    const { usernameOrEmail, password } = req.body;\n    const loginUser = await User\n      .findOne({\n        where: {\n          [or]: [\n            { username: { [iLike]: usernameOrEmail } },\n            { email: { [iLike]: usernameOrEmail } }\n          ]\n        }\n      });\n\n    if (!loginUser) {\n      const error = new Error('Invalid Credentials');\n      error.status = 400;\n      return next(error);\n    }\n    const validPassword = await loginUser.validPassword(password);\n    if (!validPassword) {\n      const error = new Error('Invalid Password');\n      error.status = 400;\n      return next(error);\n    }\n    next();\n  }\n};\n"]}