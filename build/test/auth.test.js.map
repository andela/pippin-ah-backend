{"version":3,"sources":["../../test/auth.test.js"],"names":["chai","use","chaiHttp","describe","before","models","sequelize","sync","force","it","done","newUser2","username","email","password","request","server","post","send","end","err","res","body","token","to","not","equal","undefined","usernameOrEmail"],"mappings":";;AAAA;;;;AACA;;;;AACA;;;;AACA;;;;;;AAEAA,eAAKC,GAAL,CAASC,kBAAT;;AAEAC,SAAS,2BAAT,EAAsC,YAAM;AAC1CC,SAAO;AAAA,WAAMC,iBAAOC,SAAP,CAAiBC,IAAjB,CAAsB,EAAEC,OAAO,IAAT,EAAtB,CAAN;AAAA,GAAP;;AAEAL,WAAS,oBAAT,EAA+B,YAAM;AACnCM,OAAG,kDAAH,EACE,UAACC,IAAD,EAAU;AACR,UAAMC,WAAW;AACfC,kBAAU,UADK;AAEfC,eAAO,oBAFQ;AAGfC,kBAAU;AAHK,OAAjB;AAKAd,qBAAKe,OAAL,CAAaC,aAAb,EACGC,IADH,CACQ,eADR,EAEGC,IAFH,CAEQP,QAFR,EAGGQ,GAHH,CAGO,UAACC,GAAD,EAAMC,GAAN,EAAc;AACjB,0BAAOA,IAAIC,IAAJ,CAASC,KAAhB,EAAuBC,EAAvB,CAA0BC,GAA1B,CAA8BC,KAA9B,CAAoCC,SAApC;AACAjB;AACD,OANH;AAOD,KAdH;AAeAD,OAAG,2CAAH,EACE,UAACC,IAAD,EAAU;AACR,UAAMC,WAAW;AACfiB,yBAAiB,UADF;AAEfd,kBAAU;AAFK,OAAjB;AAIAd,qBAAKe,OAAL,CAAaC,aAAb,EACGC,IADH,CACQ,qBADR,EAEGC,IAFH,CAEQP,QAFR,EAGGQ,GAHH,CAGO,UAACC,GAAD,EAAMC,GAAN,EAAc;AACjB,0BAAOA,IAAIC,IAAJ,CAASC,KAAhB,EAAuBC,EAAvB,CAA0BC,GAA1B,CAA8BC,KAA9B,CAAoCC,SAApC;AACAjB;AACD,OANH;AAOD,KAbH;AAcD,GA9BD;AA+BD,CAlCD","file":"auth.test.js","sourcesContent":["import chai, { expect } from 'chai';\nimport chaiHttp from 'chai-http';\nimport models from '../models';\nimport server from '../app';\n\nchai.use(chaiHttp);\n\ndescribe('AUTHENTICATION TEST SUITE', () => {\n  before(() => models.sequelize.sync({ force: true }));\n\n  describe('JWT AUTHENTICATION', () => {\n    it('should return a token on successful registration',\n      (done) => {\n        const newUser2 = {\n          username: 'ebenezer',\n          email: 'ebenezer@gmail.com',\n          password: 'secretstuff',\n        };\n        chai.request(server)\n          .post('/api/v1/users')\n          .send(newUser2)\n          .end((err, res) => {\n            expect(res.body.token).to.not.equal(undefined);\n            done();\n          });\n      });\n    it('should return a token on successful login',\n      (done) => {\n        const newUser2 = {\n          usernameOrEmail: 'ebenezer',\n          password: 'secretstuff',\n        };\n        chai.request(server)\n          .post('/api/v1/users/login')\n          .send(newUser2)\n          .end((err, res) => {\n            expect(res.body.token).to.not.equal(undefined);\n            done();\n          });\n      });\n  });\n});\n"]}