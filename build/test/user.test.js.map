{"version":3,"sources":["../../test/user.test.js"],"names":["chai","use","chaiHttp","describe","firstUserToken","before","models","sequelize","sync","force","requestObject","username","email","password","request","server","post","send","responseObject","body","token","it","done","newUser2","end","err","res","status","to","equal","error","errorResult","JSON","parse","length","Array","isArray","be","true","usernameOrEmail","message","UsernameOrEmail","get","set","response"],"mappings":";;;;;;;;;;AAAA;;;;AACA;;;;AACA;;;;AACA;;;;;;AAEAA,eAAKC,GAAL,CAASC,kBAAT;;AAEAC,SAAS,iBAAT,EAA4B,YAAM;AAChC,MAAIC,uBAAJ;AACAC,kFAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACCC,iBAAOC,SAAP,CAAiBC,IAAjB,CAAsB,EAAEC,OAAO,IAAT,EAAtB,CADD;;AAAA;AAGCC,yBAHD,GAGiB;AACpBC,wBAAU,aADU;AAEpBC,qBAAO,kBAFa;AAGpBC,wBAAU;AAHU,aAHjB;AAAA;AAAA,mBASwBb,eAAKc,OAAL,CAAaC,aAAb,EAAqBC,IAArB,CAA0B,eAA1B,EAC1BC,IAD0B,CACrBP,aADqB,CATxB;;AAAA;AASCQ,0BATD;;AAWLd,6BAAiBc,eAAeC,IAAf,CAAoBC,KAArC;;AAXK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAP;;AAcAjB,WAAS,yBAAT,EAAoC,YAAM;AACxCkB,OAAG,8DAAH,EACE,UAACC,IAAD,EAAU;AACR,UAAMC,WAAW;AACfZ,kBAAU,WADK;AAEfC,eAAO,yBAFQ;AAGfC,kBAAU;AAHK,OAAjB;AAKAb,qBAAKc,OAAL,CAAaC,aAAb,EACGC,IADH,CACQ,eADR,EAEGC,IAFH,CAEQM,QAFR,EAGGC,GAHH,CAGO,UAACC,GAAD,EAAMC,GAAN,EAAc;AACjB,0BAAOA,IAAIC,MAAX,EAAmBC,EAAnB,CAAsBC,KAAtB,CAA4B,GAA5B;AACA,0BAAOH,IAAIP,IAAJ,CAASW,KAAhB,EAAuBF,EAAvB,CAA0BC,KAA1B,CACE,iDADF;AAEAP;AACD,OARH;AASD,KAhBH;;AAkBAD,OAAG,gEAAH,EACE,UAACC,IAAD,EAAU;AACR,UAAMC,WAAW;AACfZ,kBAAU,WADK;AAEfC,eAAO,yBAFQ;AAGfC,kBAAU;AAHK,OAAjB;AAKAb,qBAAKc,OAAL,CAAaC,aAAb,EACGC,IADH,CACQ,eADR,EAEGC,IAFH,CAEQM,QAFR,EAGGC,GAHH,CAGO,UAACC,GAAD,EAAMC,GAAN,EAAc;AACjB,0BAAOA,IAAIC,MAAX,EAAmBC,EAAnB,CAAsBC,KAAtB,CAA4B,GAA5B;AACAP;AACD,OANH;AAOD,KAdH;;AAgBAD,OAAG,mDAAH,EACE,UAACC,IAAD,EAAU;AACR,UAAMC,WAAW;AACfZ,kBAAU,WADK;AAEfC,eAAO,yBAFQ;AAGfC,kBAAU;AAHK,OAAjB;AAKAb,qBAAKc,OAAL,CAAaC,aAAb,EACGC,IADH,CACQ,eADR,EAEGC,IAFH,CAEQM,QAFR,EAGGC,GAHH,CAGO,UAACC,GAAD,EAAMC,GAAN,EAAc;AACjB,0BAAOA,IAAIC,MAAX,EAAmBC,EAAnB,CAAsBC,KAAtB,CAA4B,GAA5B;AACA,0BAAOH,IAAIP,IAAJ,CAASW,KAAhB,EAAuBF,EAAvB,CAA0BC,KAA1B,CACE,sBADF;AAEAP;AACD,OARH;AASD,KAhBH;;AAkBAD,OAAG,0DAAH,EACE,UAACC,IAAD,EAAU;AACR,UAAMC,WAAW;AACfZ,kBAAU,WADK;AAEfC,eAAO,yBAFQ;AAGfC,kBAAU;AAHK,OAAjB;AAKAb,qBAAKc,OAAL,CAAaC,aAAb,EACGC,IADH,CACQ,eADR,EAEGC,IAFH,CAEQM,QAFR,EAGGC,GAHH,CAGO,UAACC,GAAD,EAAMC,GAAN,EAAc;AACjB,0BAAOA,IAAIC,MAAX,EAAmBC,EAAnB,CAAsBC,KAAtB,CAA4B,GAA5B;AACA,0BAAOH,IAAIP,IAAJ,CAASW,KAAhB,EAAuBF,EAAvB,CAA0BC,KAA1B,CACE,sBADF;AAEAP;AACD,OARH;AASD,KAhBH;;AAkBAD,OAAG,sDAAH,EACE,UAACC,IAAD,EAAU;AACR,UAAMC,WAAW;AACfZ,kBAAU,WADK;AAEfC,eAAO,qBAFQ;AAGfC,kBAAU;AAHK,OAAjB;AAKAb,qBAAKc,OAAL,CAAaC,aAAb,EACGC,IADH,CACQ,eADR,EAEGC,IAFH,CAEQM,QAFR,EAGGC,GAHH,CAGO,UAACC,GAAD,EAAMC,GAAN,EAAc;AACjB,0BAAOA,IAAIC,MAAX,EAAmBC,EAAnB,CAAsBC,KAAtB,CAA4B,GAA5B;AACA,0BAAOH,IAAIP,IAAJ,CAASW,KAAhB,EAAuBF,EAAvB,CAA0BC,KAA1B,CACE,yBADF;AAEAP;AACD,OARH;AASD,KAhBH;;AAkBAD,OAAG,6DAAH,EACE,UAACC,IAAD,EAAU;AACR,UAAMC,WAAW;AACfZ,kBAAU,WADK;AAEfC,eAAO,qBAFQ;AAGfC,kBAAU;AAHK,OAAjB;AAKAb,qBAAKc,OAAL,CAAaC,aAAb,EACGC,IADH,CACQ,eADR,EAEGC,IAFH,CAEQM,QAFR,EAGGC,GAHH,CAGO,UAACC,GAAD,EAAMC,GAAN,EAAc;AACjB,0BAAOA,IAAIC,MAAX,EAAmBC,EAAnB,CAAsBC,KAAtB,CAA4B,GAA5B;AACA,0BAAOH,IAAIP,IAAJ,CAASW,KAAhB,EAAuBF,EAAvB,CAA0BC,KAA1B,CACE,yBADF;AAEAP;AACD,OARH;AASD,KAhBH;;AAkBAD,OAAG,wEAAH,EACE,UAACC,IAAD,EAAU;AACR,UAAMC,WAAW;AACfZ,kBAAU,WADK;AAEfC,eAAO,yBAFQ;AAGfC,kBAAU;AAHK,OAAjB;AAKAb,qBAAKc,OAAL,CAAaC,aAAb,EACGC,IADH,CACQ,eADR,EAEGC,IAFH,CAEQM,QAFR,EAGGC,GAHH,CAGO,UAACC,GAAD,EAAMC,GAAN,EAAc;AACjB,0BAAOA,IAAIC,MAAX,EAAmBC,EAAnB,CAAsBC,KAAtB,CAA4B,GAA5B;AACA,0BAAOH,IAAIP,IAAJ,CAASW,KAAhB,EAAuBF,EAAvB,CAA0BC,KAA1B,CACE,6CADF;AAEAP;AACD,OARH;AASD,KAhBH;;AAkBAD,OAAG,oEAAH,EACE,UAACC,IAAD,EAAU;AACR,UAAMC,WAAW;AACfZ,kBAAU,OADK;AAEfC,eAAO,yBAFQ;AAGfC,kBAAU;AAHK,OAAjB;AAKAb,qBAAKc,OAAL,CAAaC,aAAb,EACGC,IADH,CACQ,eADR,EAEGC,IAFH,CAEQM,QAFR,EAGGC,GAHH,CAGO,UAACC,GAAD,EAAMC,GAAN,EAAc;AACjB,0BAAOA,IAAIC,MAAX,EAAmBC,EAAnB,CAAsBC,KAAtB,CAA4B,GAA5B;AACA,0BAAOH,IAAIP,IAAJ,CAASW,KAAhB,EAAuBF,EAAvB,CAA0BC,KAA1B,CACE,6CADF;AAEAP;AACD,OARH;AASD,KAhBH;;AAkBAD,OAAG,0CAAH,EACE,UAACC,IAAD,EAAU;AACR,UAAMC,WAAW;AACfZ,kBAAU,cADK;AAEfC,eAAO,yBAFQ;AAGfC,kBAAU;AAHK,OAAjB;AAKAb,qBAAKc,OAAL,CAAaC,aAAb,EACGC,IADH,CACQ,eADR,EAEGC,IAFH,CAEQM,QAFR,EAGGC,GAHH,CAGO,UAACC,GAAD,EAAMC,GAAN,EAAc;AACjB,0BAAOA,IAAIC,MAAX,EAAmBC,EAAnB,CAAsBC,KAAtB,CAA4B,GAA5B;AACA,0BAAOH,IAAIP,IAAJ,CAASW,KAAhB,EAAuBF,EAAvB,CAA0BC,KAA1B,CACE,kDADF;AAEAP;AACD,OARH;AASD,KAhBH;;AAkBAD,OAAG,gCAAH,EAAqC,UAACC,IAAD,EAAU;AAC7C,UAAMC,WAAW;AACfZ,kBAAU,WADK;AAEfC,eAAO,sBAFQ;AAGfC,kBAAU;AAHK,OAAjB;AAKAb,qBAAKc,OAAL,CAAaC,aAAb,EACGC,IADH,CACQ,eADR,EAEGC,IAFH,CAEQM,QAFR,EAGGC,GAHH,CAGO,UAACC,GAAD,EAAMC,GAAN,EAAc;AACjB,0BAAOA,IAAIC,MAAX,EAAmBC,EAAnB,CAAsBC,KAAtB,CAA4B,GAA5B;AACA,0BAAOH,IAAIP,IAAJ,CAASW,KAAhB,EAAuBF,EAAvB,CAA0BC,KAA1B,CACE,4BADF;AAEAP;AACD,OARH;AASD,KAfD;;AAiBAD,OAAG,iDAAH,EAAsD,UAACC,IAAD,EAAU;AAC9D,UAAMC,WAAW;AACfZ,kBAAU,EADK;AAEfC,eAAO,EAFQ;AAGfC,kBAAU;AAHK,OAAjB;AAKAb,qBAAKc,OAAL,CAAaC,aAAb,EACGC,IADH,CACQ,eADR,EAEGC,IAFH,CAEQM,QAFR,EAGGC,GAHH,CAGO,UAACC,GAAD,EAAMC,GAAN,EAAc;AACjB,YAAMK,cAAcC,KAAKC,KAAL,CAAWP,IAAIP,IAAJ,CAASW,KAApB,CAApB;AACA,0BAAOJ,IAAIC,MAAX,EAAmBC,EAAnB,CAAsBC,KAAtB,CAA4B,GAA5B;AACA,0BAAOE,YAAYG,MAAnB,EAA2BN,EAA3B,CAA8BC,KAA9B,CAAoC,CAApC;AACA;AACA,0BAAOM,MAAMC,OAAN,CAAcL,WAAd,CAAP,EAAmCH,EAAnC,CAAsCS,EAAtC,CAAyCC,IAAzC;AACA,0BAAOP,YAAY,CAAZ,CAAP,EAAuBH,EAAvB,CAA0BC,KAA1B,CAAgC,4BAAhC;AACAP;AACD,OAXH;AAYD,KAlBD;;AAoBAD,OAAG,iEAAH,EACE,UAACC,IAAD,EAAU;AACR,UAAMC,WAAW;AACfZ,kBAAU;AADK,OAAjB;AAGAX,qBAAKc,OAAL,CAAaC,aAAb,EACGC,IADH,CACQ,eADR,EAEGC,IAFH,CAEQM,QAFR,EAGGC,GAHH,CAGO,UAACC,GAAD,EAAMC,GAAN,EAAc;AACjB,YAAMK,cAAcC,KAAKC,KAAL,CAAWP,IAAIP,IAAJ,CAASW,KAApB,CAApB;AACA,0BAAOJ,IAAIC,MAAX,EAAmBC,EAAnB,CAAsBC,KAAtB,CAA4B,GAA5B;AACA,0BAAOE,YAAYG,MAAnB,EAA2BN,EAA3B,CAA8BC,KAA9B,CAAoC,CAApC;AACA;AACA,0BAAOM,MAAMC,OAAN,CAAcL,WAAd,CAAP,EAAmCH,EAAnC,CAAsCS,EAAtC,CAAyCC,IAAzC;AACA,0BAAOP,YAAY,CAAZ,CAAP,EAAuBH,EAAvB,CAA0BC,KAA1B,CAAgC,mBAAhC;AACA,0BAAOE,YAAY,CAAZ,CAAP,EAAuBH,EAAvB,CAA0BC,KAA1B,CAAgC,sBAAhC;AACAP;AACD,OAZH;AAaD,KAlBH;AAmBD,GAzND;;AA2NAnB,WAAS,yBAAT,EAAoC,YAAM;AACxCkB,OAAG,mDAAH,EACE,UAACC,IAAD,EAAU;AACR,UAAMC,WAAW;AACfgB,yBAAiB,yBADF;AAEf1B,kBAAU;AAFK,OAAjB;AAIAb,qBAAKc,OAAL,CAAaC,aAAb,EACGC,IADH,CACQ,qBADR,EAEGC,IAFH,CAEQM,QAFR,EAGGC,GAHH,CAGO,UAACC,GAAD,EAAMC,GAAN,EAAc;AACjB,0BAAOA,IAAIC,MAAX,EAAmBC,EAAnB,CAAsBC,KAAtB,CAA4B,GAA5B;AACA,0BAAOH,IAAIP,IAAJ,CAASqB,OAAhB,EAAyBZ,EAAzB,CAA4BC,KAA5B,CAAkC,sBAAlC;AACAP;AACD,OAPH;AAQD,KAdH;;AAgBAD,OAAG,sDAAH,EACE,UAACC,IAAD,EAAU;AACR,UAAMC,WAAW;AACfgB,yBAAiB,WADF;AAEf1B,kBAAU;AAFK,OAAjB;AAIAb,qBAAKc,OAAL,CAAaC,aAAb,EACGC,IADH,CACQ,qBADR,EAEGC,IAFH,CAEQM,QAFR,EAGGC,GAHH,CAGO,UAACC,GAAD,EAAMC,GAAN,EAAc;AACjB,0BAAOA,IAAIC,MAAX,EAAmBC,EAAnB,CAAsBC,KAAtB,CAA4B,GAA5B;AACA,0BAAOH,IAAIP,IAAJ,CAASqB,OAAhB,EAAyBZ,EAAzB,CAA4BC,KAA5B,CAAkC,sBAAlC;AACAP;AACD,OAPH;AAQD,KAdH;;AAgBAD,OAAG,oDAAH,EACE,UAACC,IAAD,EAAU;AACR,UAAMC,WAAW;AACfgB,yBAAiB,sBADF;AAEf1B,kBAAU;AAFK,OAAjB;AAIAb,qBAAKc,OAAL,CAAaC,aAAb,EACGC,IADH,CACQ,qBADR,EAEGC,IAFH,CAEQM,QAFR,EAGGC,GAHH,CAGO,UAACC,GAAD,EAAMC,GAAN,EAAc;AACjB,0BAAOA,IAAIC,MAAX,EAAmBC,EAAnB,CAAsBC,KAAtB,CAA4B,GAA5B;AACA,0BAAOH,IAAIP,IAAJ,CAASW,KAAhB,EAAuBF,EAAvB,CAA0BC,KAA1B,CAAgC,qBAAhC;AACAP;AACD,OAPH;AAQD,KAdH;;AAgBAD,OAAG,0CAAH,EACE,UAACC,IAAD,EAAU;AACR,UAAMC,WAAW;AACfgB,yBAAiB,yBADF;AAEf1B,kBAAU;AAFK,OAAjB;AAIAb,qBAAKc,OAAL,CAAaC,aAAb,EACGC,IADH,CACQ,qBADR,EAEGC,IAFH,CAEQM,QAFR,EAGGC,GAHH,CAGO,UAACC,GAAD,EAAMC,GAAN,EAAc;AACjB,0BAAOA,IAAIC,MAAX,EAAmBC,EAAnB,CAAsBC,KAAtB,CAA4B,GAA5B;AACA,0BAAOH,IAAIP,IAAJ,CAASW,KAAhB,EAAuBF,EAAvB,CAA0BC,KAA1B,CAAgC,kBAAhC;AACAP;AACD,OAPH;AAQD,KAdH;;AAgBAD,OAAG,6DAAH,EACE,UAACC,IAAD,EAAU;AACR,UAAMC,WAAW,EAAjB;AAGAvB,qBAAKc,OAAL,CAAaC,aAAb,EACGC,IADH,CACQ,qBADR,EAEGC,IAFH,CAEQM,QAFR,EAGGC,GAHH,CAGO,UAACC,GAAD,EAAMC,GAAN,EAAc;AACjB,YAAMK,cAAcC,KAAKC,KAAL,CAAWP,IAAIP,IAAJ,CAASW,KAApB,CAApB;AACA,0BAAOJ,IAAIC,MAAX,EAAmBC,EAAnB,CAAsBC,KAAtB,CAA4B,GAA5B;AACA;AACA,0BAAOM,MAAMC,OAAN,CAAcL,WAAd,CAAP,EAAmCH,EAAnC,CAAsCS,EAAtC,CAAyCC,IAAzC;AACA,0BAAOP,YAAY,CAAZ,CAAP,EAAuBH,EAAvB,CAA0BC,KAA1B,CAAgC,6BAAhC;AACA,0BAAOE,YAAY,CAAZ,CAAP,EAAuBH,EAAvB,CAA0BC,KAA1B,CAAgC,sBAAhC;AACAP;AACD,OAXH;AAYD,KAjBH;;AAmBAD,OAAG,8CAAH,EAAmD,UAACC,IAAD,EAAU;AAC3D,UAAMC,WAAW;AACfkB,yBAAiB,IADF;AAEf5B,kBAAU;AAFK,OAAjB;AAIAb,qBAAKc,OAAL,CAAaC,aAAb,EACGC,IADH,CACQ,qBADR,EAEGC,IAFH,CAEQM,QAFR,EAGGC,GAHH,CAGO,UAACC,GAAD,EAAMC,GAAN,EAAc;AACjB,YAAMK,cAAcC,KAAKC,KAAL,CAAWP,IAAIP,IAAJ,CAASW,KAApB,CAApB;AACA,0BAAOJ,IAAIC,MAAX,EAAmBC,EAAnB,CAAsBC,KAAtB,CAA4B,GAA5B;AACA;AACA,0BAAOM,MAAMC,OAAN,CAAcL,WAAd,CAAP,EAAmCH,EAAnC,CAAsCS,EAAtC,CAAyCC,IAAzC;AACA,0BAAOP,YAAY,CAAZ,CAAP,EAAuBH,EAAvB,CAA0BC,KAA1B,CAAgC,6BAAhC;AACAP;AACD,OAVH;AAWD,KAhBD;;AAkBAD,OAAG,+CAAH,EAAoD,UAACC,IAAD,EAAU;AAC5D,UAAMC,WAAW;AACfZ,kBAAU,MADK;AAEfE,kBAAU;AAFK,OAAjB;AAIAb,qBAAKc,OAAL,CAAaC,aAAb,EACGC,IADH,CACQ,qBADR,EAEGC,IAFH,CAEQM,QAFR,EAGGC,GAHH,CAGO,UAACC,GAAD,EAAMC,GAAN,EAAc;AACjB,YAAMK,cAAcC,KAAKC,KAAL,CAAWP,IAAIP,IAAJ,CAASW,KAApB,CAApB;AACA,0BAAOJ,IAAIC,MAAX,EAAmBC,EAAnB,CAAsBC,KAAtB,CAA4B,GAA5B;AACA;AACA,0BAAOM,MAAMC,OAAN,CAAcL,WAAd,CAAP,EAAmCH,EAAnC,CAAsCS,EAAtC,CAAyCC,IAAzC;AACA,0BAAOP,YAAY,CAAZ,CAAP,EAAuBH,EAAvB,CAA0BC,KAA1B,CAAgC,6BAAhC;AACAP;AACD,OAVH;AAWD,KAhBD;;AAkBAD,OAAG,iDAAH,EAAsD,UAACC,IAAD,EAAU;AAC9D,UAAMC,WAAW;AACfgB,yBAAiB,EADF;AAEf1B,kBAAU;AAFK,OAAjB;AAIAb,qBAAKc,OAAL,CAAaC,aAAb,EACGC,IADH,CACQ,qBADR,EAEGC,IAFH,CAEQM,QAFR,EAGGC,GAHH,CAGO,UAACC,GAAD,EAAMC,GAAN,EAAc;AACjB,YAAMK,cAAcC,KAAKC,KAAL,CAAWP,IAAIP,IAAJ,CAASW,KAApB,CAApB;AACA,0BAAOJ,IAAIC,MAAX,EAAmBC,EAAnB,CAAsBC,KAAtB,CAA4B,GAA5B;AACA,0BAAOE,YAAYG,MAAnB,EAA2BN,EAA3B,CAA8BC,KAA9B,CAAoC,CAApC;AACA;AACA,0BAAOM,MAAMC,OAAN,CAAcL,WAAd,CAAP,EAAmCH,EAAnC,CAAsCS,EAAtC,CAAyCC,IAAzC;AACA,0BAAOP,YAAY,CAAZ,CAAP,EAAuBH,EAAvB,CAA0BC,KAA1B,CAAgC,mCAAhC;AACA,0BAAOE,YAAY,CAAZ,CAAP,EAAuBH,EAAvB,CAA0BC,KAA1B,CAAgC,4BAAhC;AACAP;AACD,OAZH;AAaD,KAlBD;AAmBD,GA3ID;;AA6IAnB,WAAS,mBAAT,EAA8B,YAAM;AAClCkB,OAAG,0DAAH,2EAA+D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBACtCrB,eAAKc,OAAL,CAAaC,aAAb,EAAqB2B,GAArB,CAAyB,cAAzB,EACpBC,GADoB,CAChB,eADgB,EACCvC,cADD,CADsC;;AAAA;AACvDwC,sBADuD;;AAG7D,gCAAOA,SAASzB,IAAT,CAAcR,QAArB,EAA+BiB,EAA/B,CAAkCC,KAAlC,CAAwC,aAAxC;;AAH6D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAA/D;;AAMAR,OAAG,sDAAH,2EACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBACyBrB,eAAKc,OAAL,CAAaC,aAAb,EAAqB2B,GAArB,CAAyB,cAAzB,CADzB;;AAAA;AACQE,sBADR;;AAEE,gCAAOA,SAASzB,IAAT,CAAcW,KAArB,EAA4BF,EAA5B,CAA+BC,KAA/B,CAAqC,mBAArC;;AAFF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KADF;;AAMAR,OAAG,sDAAH,2EACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBACyBrB,eAAKc,OAAL,CAAaC,aAAb,EAAqB2B,GAArB,CAAyB,cAAzB,EACpBC,GADoB,CAChB,eADgB,EACC,gBADD,CADzB;;AAAA;AACQC,sBADR;;AAGE,gCAAOA,SAASzB,IAAT,CAAcW,KAArB,EAA4BF,EAA5B,CAA+BC,KAA/B,CAAqC,eAArC;;AAHF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KADF;AAMD,GAnBD;AAoBD,CA5YD","file":"user.test.js","sourcesContent":["import chai, { expect } from 'chai';\nimport chaiHttp from 'chai-http';\nimport models from '../models';\nimport server from '../app';\n\nchai.use(chaiHttp);\n\ndescribe('USER TEST SUITE', () => {\n  let firstUserToken;\n  before(async () => {\n    await models.sequelize.sync({ force: true });\n\n    const requestObject = {\n      username: 'johnsolomon',\n      email: 'john@solomon.com',\n      password: 'johnny777'\n    };\n\n    const responseObject = await chai.request(server).post('/api/v1/users')\n      .send(requestObject);\n    firstUserToken = responseObject.body.token;\n  });\n\n  describe('User Signup Validations', () => {\n    it('should fail creation if password contains special characters',\n      (done) => {\n        const newUser2 = {\n          username: 'habibaudu',\n          email: 'auduhabib1990@gmail.com',\n          password: 'hhrt----',\n        };\n        chai.request(server)\n          .post('/api/v1/users')\n          .send(newUser2)\n          .end((err, res) => {\n            expect(res.status).to.equal(400);\n            expect(res.body.error).to.equal(\n              'password must contain only numbers and alphabet');\n            done();\n          });\n      });\n\n    it('should successfully create user when valid params are supplied',\n      (done) => {\n        const newUser2 = {\n          username: 'habibaudu',\n          email: 'auduhabib1990@gmail.com',\n          password: 'hhrtuyhgt678',\n        };\n        chai.request(server)\n          .post('/api/v1/users')\n          .send(newUser2)\n          .end((err, res) => {\n            expect(res.status).to.equal(201);\n            done();\n          });\n      });\n\n    it('should fail creation when email is already in use',\n      (done) => {\n        const newUser2 = {\n          username: 'habibaudu',\n          email: 'auduhabib1990@gmail.com',\n          password: 'hhrtuyhgt678',\n        };\n        chai.request(server)\n          .post('/api/v1/users')\n          .send(newUser2)\n          .end((err, res) => {\n            expect(res.status).to.equal(409);\n            expect(res.body.error).to.equal(\n              'Email already in use');\n            done();\n          });\n      });\n\n    it('should fail creation when case is changed for used email',\n      (done) => {\n        const newUser2 = {\n          username: 'habibaudu',\n          email: 'Auduhabib1990@gmail.com',\n          password: 'hhrtuyhgt678',\n        };\n        chai.request(server)\n          .post('/api/v1/users')\n          .send(newUser2)\n          .end((err, res) => {\n            expect(res.status).to.equal(409);\n            expect(res.body.error).to.equal(\n              'Email already in use');\n            done();\n          });\n      });\n\n    it('should fail creation when username is already in use',\n      (done) => {\n        const newUser2 = {\n          username: 'habibaudu',\n          email: 'auduhabib@gmail.com',\n          password: 'hhrtuyhgt678',\n        };\n        chai.request(server)\n          .post('/api/v1/users')\n          .send(newUser2)\n          .end((err, res) => {\n            expect(res.status).to.equal(409);\n            expect(res.body.error).to.equal(\n              'Username already in use');\n            done();\n          });\n      });\n\n    it('should fail creation when case is changed for used username',\n      (done) => {\n        const newUser2 = {\n          username: 'Habibaudu',\n          email: 'auduhabib@gmail.com',\n          password: 'hhrtuyhgt678',\n        };\n        chai.request(server)\n          .post('/api/v1/users')\n          .send(newUser2)\n          .end((err, res) => {\n            expect(res.status).to.equal(409);\n            expect(res.body.error).to.equal(\n              'Username already in use');\n            done();\n          });\n      });\n\n    it('should not allow user creation when password is less than 8 characters',\n      (done) => {\n        const newUser2 = {\n          username: 'habibaudu',\n          email: 'auduhabib1990@gmail.com',\n          password: 'hba123',\n        };\n        chai.request(server)\n          .post('/api/v1/users')\n          .send(newUser2)\n          .end((err, res) => {\n            expect(res.status).to.equal(400);\n            expect(res.body.error).to.equal(\n              'Your password must be at least 8 characters');\n            done();\n          });\n      });\n\n    it('should not allow user creation whenn username is not up to 6 chars',\n      (done) => {\n        const newUser2 = {\n          username: 'habib',\n          email: 'auduhabib1990@gmail.com',\n          password: 'hbasdg3546',\n        };\n        chai.request(server)\n          .post('/api/v1/users')\n          .send(newUser2)\n          .end((err, res) => {\n            expect(res.status).to.equal(400);\n            expect(res.body.error).to.equal(\n              'Your username must be at least 6 characters');\n            done();\n          });\n      });\n\n    it('should only allow alphanumeric usernames',\n      (done) => {\n        const newUser2 = {\n          username: '------------',\n          email: 'auduhabib1990@gmail.com',\n          password: 'hbasdg3546',\n        };\n        chai.request(server)\n          .post('/api/v1/users')\n          .send(newUser2)\n          .end((err, res) => {\n            expect(res.status).to.equal(400);\n            expect(res.body.error).to.equal(\n              'username must contain only alphabets and numbers');\n            done();\n          });\n      });\n\n    it('should only allow valid emails', (done) => {\n      const newUser2 = {\n        username: 'hbabsgdhh',\n        email: 'auduhabib19gmail.com',\n        password: 'hbasdg3546',\n      };\n      chai.request(server)\n        .post('/api/v1/users')\n        .send(newUser2)\n        .end((err, res) => {\n          expect(res.status).to.equal(400);\n          expect(res.body.error).to.equal(\n            'please Enter a valid Email');\n          done();\n        });\n    });\n\n    it('should not allow creation when fields are empty', (done) => {\n      const newUser2 = {\n        username: '',\n        email: '',\n        password: '',\n      };\n      chai.request(server)\n        .post('/api/v1/users')\n        .send(newUser2)\n        .end((err, res) => {\n          const errorResult = JSON.parse(res.body.error);\n          expect(res.status).to.equal(400);\n          expect(errorResult.length).to.equal(3);\n          // eslint-disable-next-line no-unused-expressions\n          expect(Array.isArray(errorResult)).to.be.true;\n          expect(errorResult[0]).to.equal('username must not be empty');\n          done();\n        });\n    });\n\n    it('should not allow creation when required params are not provided',\n      (done) => {\n        const newUser2 = {\n          username: 'abatamaya',\n        };\n        chai.request(server)\n          .post('/api/v1/users')\n          .send(newUser2)\n          .end((err, res) => {\n            const errorResult = JSON.parse(res.body.error);\n            expect(res.status).to.equal(400);\n            expect(errorResult.length).to.equal(2);\n            // eslint-disable-next-line no-unused-expressions\n            expect(Array.isArray(errorResult)).to.be.true;\n            expect(errorResult[0]).to.equal('email is required');\n            expect(errorResult[1]).to.equal('password is required');\n            done();\n          });\n      });\n  });\n\n  describe('User SignIn Validations', () => {\n    it('should sign user in with valid email and password',\n      (done) => {\n        const newUser2 = {\n          usernameOrEmail: 'auduhabib1990@gmail.com',\n          password: 'hhrtuyhgt678'\n        };\n        chai.request(server)\n          .post('/api/v1/users/login')\n          .send(newUser2)\n          .end((err, res) => {\n            expect(res.status).to.equal(200);\n            expect(res.body.message).to.equal('Login was successful');\n            done();\n          });\n      });\n\n    it('should sign user in with valid username and password',\n      (done) => {\n        const newUser2 = {\n          usernameOrEmail: 'habibaudu',\n          password: 'hhrtuyhgt678'\n        };\n        chai.request(server)\n          .post('/api/v1/users/login')\n          .send(newUser2)\n          .end((err, res) => {\n            expect(res.status).to.equal(200);\n            expect(res.body.message).to.equal('Login was successful');\n            done();\n          });\n      });\n\n    it('should not allow  invalid email or password signIn',\n      (done) => {\n        const newUser2 = {\n          usernameOrEmail: 'auduhabib0@gmail.com',\n          password: 'invalidpassword'\n        };\n        chai.request(server)\n          .post('/api/v1/users/login')\n          .send(newUser2)\n          .end((err, res) => {\n            expect(res.status).to.equal(400);\n            expect(res.body.error).to.equal('Invalid Credentials');\n            done();\n          });\n      });\n\n    it('should not allow invalid password signIn',\n      (done) => {\n        const newUser2 = {\n          usernameOrEmail: 'auduhabib1990@gmail.com',\n          password: 'invalidpassword'\n        };\n        chai.request(server)\n          .post('/api/v1/users/login')\n          .send(newUser2)\n          .end((err, res) => {\n            expect(res.status).to.equal(400);\n            expect(res.body.error).to.equal('Invalid Password');\n            done();\n          });\n      });\n\n    it('should not login user when required params are not provided',\n      (done) => {\n        const newUser2 = {\n\n        };\n        chai.request(server)\n          .post('/api/v1/users/login')\n          .send(newUser2)\n          .end((err, res) => {\n            const errorResult = JSON.parse(res.body.error);\n            expect(res.status).to.equal(400);\n            // eslint-disable-next-line no-unused-expressions\n            expect(Array.isArray(errorResult)).to.be.true;\n            expect(errorResult[0]).to.equal('usernameOrEmail is required');\n            expect(errorResult[1]).to.equal('password is required');\n            done();\n          });\n      });\n\n    it('should not allow login when fields are empty', (done) => {\n      const newUser2 = {\n        UsernameOrEmail: '  ',\n        password: '   ',\n      };\n      chai.request(server)\n        .post('/api/v1/users/login')\n        .send(newUser2)\n        .end((err, res) => {\n          const errorResult = JSON.parse(res.body.error);\n          expect(res.status).to.equal(400);\n          // eslint-disable-next-line no-unused-expressions\n          expect(Array.isArray(errorResult)).to.be.true;\n          expect(errorResult[0]).to.equal('usernameOrEmail is required');\n          done();\n        });\n    });\n\n    it('should not allow login when username is empty', (done) => {\n      const newUser2 = {\n        username: '    ',\n        password: 'hhrtuyhgt678',\n      };\n      chai.request(server)\n        .post('/api/v1/users/login')\n        .send(newUser2)\n        .end((err, res) => {\n          const errorResult = JSON.parse(res.body.error);\n          expect(res.status).to.equal(400);\n          // eslint-disable-next-line no-unused-expressions\n          expect(Array.isArray(errorResult)).to.be.true;\n          expect(errorResult[0]).to.equal('usernameOrEmail is required');\n          done();\n        });\n    });\n\n    it('should not allow creation when fields are empty', (done) => {\n      const newUser2 = {\n        usernameOrEmail: '',\n        password: '',\n      };\n      chai.request(server)\n        .post('/api/v1/users/login')\n        .send(newUser2)\n        .end((err, res) => {\n          const errorResult = JSON.parse(res.body.error);\n          expect(res.status).to.equal(400);\n          expect(errorResult.length).to.equal(2);\n          // eslint-disable-next-line no-unused-expressions\n          expect(Array.isArray(errorResult)).to.be.true;\n          expect(errorResult[0]).to.equal('usernameOrEmail must not be empty');\n          expect(errorResult[1]).to.equal('password must not be empty');\n          done();\n        });\n    });\n  });\n\n  describe('Get a single User', () => {\n    it('Should get a user with valid user id present in database', async () => {\n      const response = await chai.request(server).get('/api/v1/user')\n        .set('Authorization', firstUserToken);\n      expect(response.body.username).to.equal('johnsolomon');\n    });\n\n    it('Should not get a user when the token is not provided',\n      async () => {\n        const response = await chai.request(server).get('/api/v1/user');\n        expect(response.body.error).to.equal('No token provided');\n      });\n\n    it('Should not get a user when invalid token is provided',\n      async () => {\n        const response = await chai.request(server).get('/api/v1/user')\n          .set('Authorization', 'fjjdfjdjfdjfjf');\n        expect(response.body.error).to.equal('Invalid token');\n      });\n  });\n});\n"]}